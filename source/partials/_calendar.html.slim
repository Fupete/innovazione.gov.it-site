ruby:
  phases ||= []
  milestones ||= []
  fixed_slides_per_view ||= 0

- if milestones.any?
  ruby:
    current_milestone_index = milestones.index { |m| m.state == "current" } || 0
    phase1 = phases.first
    phase1_idx = phase1.milestones.size
    phase2 = phases[1] || nil
    phase2_idx = phase2 ? phase2.milestones.size + phase1_idx : nil
    phase3 = phases[2] || nil
    phase3_idx = phase3 ? phase3.milestones.size + phase2_idx : nil
    start_idx = [0, phase1_idx, phase2_idx, phase3_idx].compact
    last_idx = [phase1_idx, phase2_idx, phase3_idx].compact.map { |x| x - 1 }
    last_past_idx = phase1.state == "past" ? phase1_idx - 1 : nil
    cols = case milestones.size
           when 1
             3
           when 2
             6
           when 3
             9
           else
             10
           end

  .row.justify-content-center 
    div class="col-lg-#{cols}"
      .px-0.it-carousel-wrapper.splide{ data-calendar-splide=""
          data-slides="#{milestones.size}"
          data-initial=current_milestone_index
          data-fixed=fixed_slides_per_view
          role="group"
          aria-label="carousel" }

        .splide__arrows.d-flex.justify-content-center.justify-content-lg-between.splide-arrows-position
          button.splide__arrow.splide__arrow--prev.splide-custom-prev
            svg.icon.icon-lg.icon-primary
              use xlink:href="/images/sprite.svg#it-arrow-left-circle"
          button.splide__arrow.splide__arrow--next.splide-custom-next
            svg.icon.icon-lg.icon-primary
              use xlink:href="/images/sprite.svg#it-arrow-right-circle"
        .justify-content-lg-center._mid-faded-calendar
          .splide__track
            ul.splide__list
              - milestones.each_with_index do |milestone, i|

                ruby:
                  last_in_past_phase = last_past_idx ? last_past_idx == i : nil
                  first_in_phase = start_idx.include?(i)
                  last_in_phase = last_idx.include?(i)
                  phase = if i < phase1_idx
                            phase1
                          elsif i < phase2_idx
                            phase2
                          else
                            phase3
                          end

                li.splide__slide
                  = partial "partials/card-calendar",
                    locals: {milestone: milestone,
                    phase: phase,
                    last_in_past_phase: last_in_past_phase,
                    last_in_phase: last_in_phase,
                    last: i == milestones.size - 1,
                    first_in_phase: first_in_phase}