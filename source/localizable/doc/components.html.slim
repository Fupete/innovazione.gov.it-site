main.container.my-5
  h1 Documentazione
  p.lead Qui sviluppiamo nuovi componenti da usare/copiare all'interno delle varie pagine. Allo stesso tempo una documentazione live per l'uso di eventuali partials.


= partial "partials/doc/title", locals: {title: "Layout"}
= partial "partials/doc/section", locals: {title: "Breadcrumbs"} do
= partial "partials/breadcrumb",
  locals: {page: dato.articles_index}

= partial "partials/breadcrumb",
  locals: {page: dato.minister_interviews_index}

= partial "partials/doc/title", locals: {title: "Page headers"}

= partial "partials/doc/section", locals: {title: "Header pagina a una colonna"} do
  = partial "partials/headers/header-one-column",
    locals: {title: "title", subtitle: "subtitle", subpages: nil}

  p <code>partials/headers/header-one-column</code>: il partial prevede tre parametri <code>title, subtitle, subpages</code> che dovrebbero esser presenti in tutte le index




= partial "partials/doc/section", locals: {title: "Headers"} do
  p <code>partials/headers/page-header</code>: un tentativo di poter gestire tutte le tipologie di header scrivendo meno codice possibile.
  p Il partial si aspetta un oggetto <code>page</code> che contenga smepre almeno <code>title e description</code> e opzionalmente <code>summary</code>
  p Il partial accetta alcuni parametru opzionali: <code>share: true</code> per mostrare il meno di condivisione social,
  p e <code>classes: "bla bla"</code> per aggiungere classi aggiunve all'header, cambaire colore di sfondo, del testo ecc.
  p È necessario poi passare un blocco che contenga <code>content_for [:area]</code>. Le aree dispnibili sono: <code>:aside, :col_one, :col_two, :col_three</code>. P
  p Ogni blocco content_for può avere codice a piacimento


= partial "partials/doc/section", locals: {title: "Header Focus"} do
  - page = dato.minister_page

  = partial "partials/page-header", locals: {page: page, classes: "bg-primary text-white"} do
    = content_for :aside, flush: true
      = image_tag "https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Ffreepngimages.com%2Fwp-content%2Fuploads%2F2015%2F11%2Fcockerel-transparent-image.png&f=1&nofb=1",
        class: "img-fluid"

          
    = content_for :col_one, flush: true
      = partial "partials/column-title", locals: {title: t("deepen"), classes: "text-white"}
      
    = content_for :col_two, flush: true
      = partial "partials/column-title", locals: {title: t("projects.topics"), classes: "text-white"}
      = partial "partials/formatted-date", locals: {date: Time.now}



= partial "partials/doc/section", locals: {title: "Header Ministro"} do
  - page = dato.minister_page
  = partial "partials/page-header", locals: {page: page, classes: "bg-light"} do
    = content_for :aside, flush: true
      - image = dato.minister_page.photo
      .text-center
          / FIX ME : fare partial imamgine
          figure.figure
            = image_tag image.url(w: 10, h: 6, fit:'crop', auto:'format,compress'),
              data: {'sizes': '100vw',
                'src': image.url(w: 1000, h: 600, fit:'crop', auto:'format,compress'),
                'srcset': "#{image.url(w: 480, h: 288, fit:'crop', auto:'format,compress')} 480w,
                #{image.url(w: 719, h: 432, fit:'crop', auto:'format,compress')} 719w,
                #{image.url(w: 1000, h: 600, fit:'crop', auto:'format,compress')} 1023w,
                #{image.url(w: 666, h: 400, fit:'crop', auto:'format,compress')} 1500w"},
              class: "lazyload figure-img img-fluid",
              alt: image.alt,
              title: image.title
          
    = content_for :col_one, flush: true
      = partial "partials/column-title", locals: {title: t("deepen")}
      
    = content_for :col_two, flush: true
      = partial "partials/column-title", locals: {title: t("projects.topics")}





= partial "partials/doc/section", locals: {title: "Header progetto"} do
  
  - page = visible_projects.first
  = partial "partials/page-header", locals: {page: page} do
    = content_for :aside, flush: true
      .text-center
        .img-responsive-wrapper
          figure.figure.img-wrapper
            = image_tag page.image_project_logo.file.width(800).format('pjpg').to_url,
                alt: "Logo #{page.image_project_logo}",
                class: "figure-img img-fluid"
          
        / FIXME
        - if page.link_external_project_website.present?
          ruby:
            link  = page.link_external_project_website
            label = link.cta_label.present? ? link.cta_label : t("link_labels.go_to_website")

          = link_to label, link.link, class: "btn btn-primary mt-3", target: "_blank"

    = content_for :col_one, flush: true
      = partial "partials/column-title", locals: {title: t("projects.category")}
      = link_to page.category.name,
                "#{page_path(dato.projects_page)}##{page.category.slug}"
      
    = content_for :col_two, flush: true
      = partial "partials/column-title", locals: {title: t("projects.topics")}
      - page.tags.each do |tag|
          = partial "partials/chip",
            locals: {label: tag.name, url: "#"}


= partial "partials/doc/section", locals: {title: "Header articolo"} do
  - page = visible_articles.first
  = partial "partials/page-header", locals: {page: page, share: true} do
    
    = content_for :aside, flush: true
      = partial "partials/column-title", locals: {title: t("ontology.arguments")}
      - page.tags.each do |tag|
        = partial "partials/chip", locals: {label: tag.name, url: "#"}
    
    = content_for :col_one, flush: true
      = partial "partials/column-title", locals: {title: "Data"}
      = partial "partials/formatted-date", locals: {date: page.date_shown}

    = content_for :col_two, flush: true
      = partial "partials/column-title", locals: {title: I18n.t("reading-time")}
      .post__reading-time
        => article_reading_time(page)
        = I18n.t("minutes")

    = content_for :col_three, flush: true
     p 













= partial "partials/doc/title", locals: {title: "Texts"}

= partial "partials/doc/section", locals: {title: "Credits"} do

  = partial "partials/credits", locals: {credits: visible_articles.select{|a| a.credits != ""}.first.credits}
  p <code>partials/credits</code>: prevede un parametro credit con un oggetto credits




= partial "partials/doc/section", locals: {title: "Data formattata"} do
  = partial "partials/formatted-date", locals: {date: Time.now}
  p <code>partials/formatted-date</code>: prevede un parametro con un oggetto data valido e ritorna il fomrmato DD mese YYYY con il mese tradotto


= partial "partials/doc/section", locals: {title: "Titoli sezioni colonne"} do
  = partial "partials/column-title", locals: {title: "Approfondisci"}
  = partial "partials/column-title", locals: {title: "Data"}
  = partial "partials/column-title", locals: {title: "Tempo di lettura"}


= partial "partials/doc/title", locals: {title: "Cards"}

= partial "partials/doc/section", locals: {title: "Card trasparente", classes: "section-muted"} do
  .row
    - (1..2).each do
      .col-sm-6
        = partial "partials/project_card", locals: {project: nil}
  p <code>project_card</code>: il partial prevede un oggetto DatoCMS di tipo <code>project</code>




= partial "partials/doc/section", locals: {title: "Link esterni nelle card"} do
  ul.list-inline
    li.list-inline-item
      = partial "partials/external-link", locals: {label: t("link_labels.forum"), url: "#"}
    li.list-inline-item
      = partial "partials/external-link", locals: {link: dato.link_externals.first}

    p <code>external-link</code> richiede un oggetto di tipo  <code>link_external</code>. Se l'oggetto non ha una label CTA, il defautl è nello yaml "Sito web".




= partial "partials/doc/title", locals: {title: "Tags"}

= partial "partials/doc/section", locals: {title: "Chips", classes: "section-muted"} do

  - visible_tags.take(6).each do |tag|
    = partial "partials/chip",
              locals: {label: tag.name, url: "#"}

  p.mt-4 <code>chip</code> richiede 2 parametri obbligatori: <code>label</code> e <code>url</code>. Questo è lo stile default di un chip. Gli altri parametri sono opzionali e di stile e sono <code>chip_size, chip_type, btn_type, text_color</code> 


= partial "partials/doc/title", locals: {title: "Attachments and Links"}

= partial "partials/doc/section", locals: {title: "Attachments", classes: "section-muted"} do
  .section-content
    h4 = "Sezione Allegati"
    .row.mt-lg-2.mx-n4
      - dato.attachments.take(6).each do |attachment|
        .col-md-6.mt-4.px-4
          = partial "partials/attachment", locals: {attachment: attachment}


  .section-content.mt-5.py-3
    h4 = "Collegamenti Utili"
    .row.mt-lg-2.mx-n4
      .col-md-6.mt-4.px-4
        = link_to "#",
          class: "text-decoration-none"
          .card.card-teaser.rounded.shadow.align-items-center
            svg.icon.icon-primary
              use xlink:href="/images/sprite.svg#it-external-link"
            .card-body
              h5.card-title
                = "Link esterno"
              h6.card-text
                = "Description"
      .col-md-6.mt-4.px-4
        = link_to "#",
          class: "text-decoration-none"
          .card.card-teaser.rounded.shadow.align-items-center
            svg.icon.icon-primary
              use xlink:href="/images/sprite.svg#it-link"
            .card-body
              h5.card-title
                = "Link interno"
              h6.card-text
                = "Description"
  p The cards for attachments should loop over the attachments in Dato, linking to `attachment.file.url`, and displaying `attachment.file_title` and `attachment.file_description`. The cards for internal and external links should loop over the appropriate `link_external` and `link_internal` objects in Dato.
