main.container.my-5
  h1 Documentazione
  p.lead Qui sviluppiamo nuovi componenti da usare/copiare all'interno delle varie pagine. Allo stesso tempo una documentazione live per l'uso di eventuali partials.


= partial "partials/doc/title", locals: {title: "Layout"}
= partial "partials/doc/section", locals: {title: "Breadcrumbs"} do
= partial "partials/breadcrumb",
  locals: {page: dato.articles_index}

= partial "partials/breadcrumb",
  locals: {page: dato.minister_interviews_index}


= partial "partials/doc/section", locals: {title: "Heroes"} do
  | 
    <code>partials/headers/header-basic</code>: un tentativo di poter gestire tutte le tipologie di header scrivendo meno codice possibile.
    Il partial si aspetta un oggetto <code>page</code> che contenga smepre almeno <code>title e description</code> e opzionalmente <code>summary</code>
    Il partial accetta alcuni parametru opzionali:
  ul
    li <code>share: true</code> per mostrare il meno di condivisione social,
    li <code>classes: "bla bla"</code> per aggiungere classi aggiuntive all'header, cambaire colore di sfondo, del testo ecc
    li <code>subs: [collection]</code> per mostrare il menu degli approfondimenti (subpages)
  
  | È necessario poi passare un blocco che contenga <code>content_for [:area]</code> o che almeno finisca con un <code>do</code> lasciando il blocco vuoto.
    Le aree dispnibili sono: <code>:aside, :col_one, :col_two</code>.
    Ogni blocco dentro <code>content_for</code> può avere codice a piacimento

- page = visible_articles.first
= partial "partials/headers/header-basic", locals: {page: page, share: nil, subs: visible_projects_subpages} do

  = content_for :aside, flush: true
    = partial "partials/column-title", locals: {title: t("ontology.arguments")}
    - page.tags.each do |tag|
      = partial "partials/chip", locals: {label: tag.name, url: "#"}


- page = visible_articles.first
= partial "partials/headers/header-basic", locals: {page: page, share: true} do

  = content_for :aside, flush: true
    = partial "partials/column-title", locals: {title: t("ontology.arguments")}
    - page.tags.each do |tag|
      = partial "partials/chip", locals: {label: tag.name, url: "#"}

  = content_for :col_one, flush: true
    = partial "partials/column-title", locals: {title: "Data"}
    = partial "partials/formatted-date", locals: {date: page.date_shown}

  = content_for :col_two, flush: true
    = partial "partials/column-title", locals: {title: I18n.t("reading-time")}
    = partial "partials/reading-time", locals: {page: page}







= partial "partials/doc/title", locals: {title: "Texts"}

= partial "partials/doc/section", locals: {title: "Credits"} do

  = partial "partials/credits", locals: {credits: visible_articles.select{|a| a.credits != ""}.first.credits}
  p <code>partials/credits</code>: prevede un parametro credit con un oggetto credits




= partial "partials/doc/section", locals: {title: "Data formattata"} do
  = partial "partials/formatted-date", locals: {date: Time.now}
  p <code>partials/formatted-date</code>: prevede un parametro con un oggetto data valido e ritorna il fomrmato DD mese YYYY con il mese tradotto


= partial "partials/doc/section", locals: {title: "Titoli sezioni colonne"} do
  p <code>partials/column-title</code>: prevede un parametro obbligatorio <code>title</code> con una stringa
  p Si possono passare parametri opzionali:
  p: ul
    li <code>large: true</code> per avere la font a 16px
    li <code>inline: true</code> per avere la string ain display-inline-block
    li <code>classes: "classi aggiuntive"</code> per aggiungere classi a piacimento

    

  = partial "partials/column-title", locals: {title: "Nomale"}
  = partial "partials/column-title", locals: {title: "Large", large: true}
  = partial "partials/column-title", locals: {title: "Inline", inline: true}
  small altro testo


= partial "partials/doc/title", locals: {title: "Cards"}

= partial "partials/doc/section", locals: {title: "Card trasparente", classes: "section-muted"} do
  .row
    - (1..2).each do
      .col-sm-6
        = partial "partials/project_card", locals: {project: nil}
  p <code>project_card</code>: il partial prevede un oggetto DatoCMS di tipo <code>project</code>




= partial "partials/doc/section", locals: {title: "Link esterni nelle card"} do
  ul.list-inline
    li.list-inline-item
      = partial "partials/external-link", locals: {label: t("link_labels.forum"), url: "#"}
    li.list-inline-item
      = partial "partials/external-link", locals: {link: dato.link_externals.first}

    p <code>external-link</code> richiede un oggetto di tipo  <code>link_external</code>. Se l'oggetto non ha una label CTA, il defautl è nello yaml "Sito web".




= partial "partials/doc/title", locals: {title: "Tags"}

= partial "partials/doc/section", locals: {title: "Chips", classes: "section-muted"} do

  - visible_tags.take(6).each do |tag|
    = partial "partials/chip",
              locals: {label: tag.name, url: "#"}

  p.mt-4 <code>chip</code> richiede 2 parametri obbligatori: <code>label</code> e <code>url</code>. Questo è lo stile default di un chip. Gli altri parametri sono opzionali e di stile e sono <code>chip_size, chip_type, btn_type, text_color</code>


= partial "partials/doc/title", locals: {title: "Attachments and Links"}

= partial "partials/doc/section", locals: {title: "Attachments", classes: "section-muted"} do
  .section-content
    h4 = "Sezione Allegati"
    .row.mt-lg-2.mx-n4
      - dato.attachments.take(6).each do |attachment|
        .col-md-6.mt-4.px-4
          = partial "partials/attachment", locals: {attachment: attachment}


  .section-content.mt-5.py-3
    h4 = "Collegamenti Utili"
    .row.mt-lg-2.mx-n4
      .col-md-6.mt-4.px-4
        = link_to "#",
          class: "text-decoration-none"
          .card.card-teaser.rounded.shadow.align-items-center
            svg.icon.icon-primary
              use xlink:href="/images/sprite.svg#it-external-link"
            .card-body
              h5.card-title
                = "Link esterno"
              h6.card-text
                = "Description"
      .col-md-6.mt-4.px-4
        = link_to "#",
          class: "text-decoration-none"
          .card.card-teaser.rounded.shadow.align-items-center
            svg.icon.icon-primary
              use xlink:href="/images/sprite.svg#it-link"
            .card-body
              h5.card-title
                = "Link interno"
              h6.card-text
                = "Description"
  p The cards for attachments should loop over the attachments in Dato, linking to `attachment.file.url`, and displaying `attachment.file_title` and `attachment.file_description`. The cards for internal and external links should loop over the appropriate `link_external` and `link_internal` objects in Dato.
